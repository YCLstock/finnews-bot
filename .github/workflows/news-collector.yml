name: News Collector

on:
  schedule:
    # 每4小時收集一次新聞 (台灣時間 06:00, 10:00, 14:00, 18:00)
    # 對應 UTC: 22:00, 02:00, 06:00, 10:00
    - cron: '0 22,2,6,10 * * *'
  workflow_dispatch: # 允許手動觸發

jobs:
  collect-news:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip xvfb
        # 安裝 Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Collect news articles
      timeout-minutes: 15  # 設定15分鐘超時
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        YAHOO_FINANCE_URL: https://finance.yahoo.com/topic/stock-market-news
        SCRAPER_TIMEOUT: 20  # 降低單篇文章超時時間
        DISPLAY: :99
        GITHUB_ACTIONS: true  # 標識GitHub Actions環境
      run: |
        # 啟動虛擬顯示器（Selenium 需要）
        echo "🖥️ 啟動虛擬顯示器..."
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        
        # 等待顯示器啟動並檢查Chrome
        sleep 5
        echo "🔍 檢查Chrome安裝..."
        google-chrome --version
        
        # 檢查ChromeDriver可用性和目錄結構
        echo "🔧 準備ChromeDriver..."
        python -c "
        from webdriver_manager.chrome import ChromeDriverManager
        import os
        driver_path = ChromeDriverManager().install()
        print(f'ChromeDriver路徑: {driver_path}')
        print(f'文件存在: {os.path.exists(driver_path)}')
        if os.path.exists(driver_path):
            import stat
            print(f'權限: {oct(os.stat(driver_path).st_mode)[-3:]}')
        
        # 診斷目錄結構
        driver_dir = os.path.dirname(driver_path)
        print(f'\\n📁 目錄結構診斷:')
        print(f'Driver目錄: {driver_dir}')
        
        try:
            for root, dirs, files in os.walk(driver_dir):
                level = root.replace(driver_dir, '').count(os.sep)
                indent = ' ' * 2 * level
                print(f'{indent}{os.path.basename(root)}/')
                subindent = ' ' * 2 * (level + 1)
                for file in files:
                    file_path = os.path.join(root, file)
                    is_exec = os.access(file_path, os.X_OK) if os.path.exists(file_path) else False
                    exec_mark = ' [EXEC]' if is_exec else ''
                    print(f'{subindent}{file}{exec_mark}')
        except Exception as e:
            print(f'目錄掃描失敗: {e}')
        "
        
        # 嘗試手動修復ChromeDriver
        echo "🔧 嘗試手動修復ChromeDriver..."
        find /home/runner/.wdm -name "chromedriver" -type f 2>/dev/null | head -5
        
        # 找到可執行的chromedriver並設置權限
        CHROMEDRIVER_PATH=$(find /home/runner/.wdm -name "chromedriver" -type f -executable 2>/dev/null | head -1)
        if [ -n "$CHROMEDRIVER_PATH" ]; then
            echo "✅ 找到可執行的ChromeDriver: $CHROMEDRIVER_PATH"
            chmod +x "$CHROMEDRIVER_PATH"
            ls -la "$CHROMEDRIVER_PATH"
        else
            echo "❌ 未找到可執行的ChromeDriver"
            # 嘗試找到任何chromedriver文件並設置權限
            ALL_CHROMEDRIVERS=$(find /home/runner/.wdm -name "chromedriver" -type f 2>/dev/null)
            for cd_path in $ALL_CHROMEDRIVERS; do
                echo "🔧 設置權限: $cd_path"
                chmod +x "$cd_path"
                ls -la "$cd_path"
            done
        fi
        
        # 執行新聞收集器
        echo "🚀 開始執行新聞收集..."
        timeout 10m python run_news_collector.py || echo "⚠️ 新聞收集器執行超時或失敗"
    
    - name: Upload debug screenshots (if any)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: collector-debug-screenshots-${{ github.run_number }}
        path: debug_pages/
        retention-days: 3